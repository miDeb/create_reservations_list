type Sheet = GoogleAppsScript.Spreadsheet.Sheet;
type Spreadsheet = GoogleAppsScript.Spreadsheet.Spreadsheet;

const METADATA_SOURCE_KEY = "createList::sourceId";
const LIST_SHEET_SUFFIX = " - Liste";

// Ranges to take into account for generating the table. All indices are inclusive.
const RANGES = [
  {
    name: "Galerie",
    rowFrom: 9,
    rowTo: 11,
    columnFrom: 23,
    columnTo: 28,
  },
  {
    name: null,
    rowFrom: 9,
    rowTo: 30,
    columnFrom: 4,
    columnTo: 18,
  },
];

const GRAY_TEXT = SpreadsheetApp.newTextStyle()
  .setForegroundColor("gray")
  .build();

export function createList() {
  /// Pads numbers from 1 to 9 with a leading 0.
  function padIndex(number: number): string {
    if (number < 10) {
      return `0${number}`;
    } else {
      return number.toString();
    }
  }

  function getTargetSheet(spreadsheet: Spreadsheet, sourceSheet: Sheet): Sheet {
    const sourceId = sourceSheet.getSheetId().toString();

    // Find list sheets by looking at their developer metadata.
    // This allows us to keep using the original target sheet even if the original sheet was renamed.
    let target = spreadsheet
      .createDeveloperMetadataFinder()
      .withKey(METADATA_SOURCE_KEY)
      .withValue(sourceId)
      .find()[0]
      ?.getLocation()
      .getSheet();

    const expectedTargetName = sourceSheet.getName() + LIST_SHEET_SUFFIX;

    if (!target) {
      target = spreadsheet.insertSheet(expectedTargetName);

      target.addDeveloperMetadata(METADATA_SOURCE_KEY, sourceId);

      // Differentiate list tabs by coloring them gray.
      target.setTabColor("gray");
      // Prevent focus switch to newly inserted sheet.
      spreadsheet.setActiveSheet(sourceSheet);
    } else {
      target.clear();
      if (target.getName() !== expectedTargetName) {
        target.setName(expectedTargetName);
      }
    }

    return target;
  }

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  const currentSheet = spreadsheet.getActiveSheet();

  const currentSheetName = currentSheet.getName();

  if (currentSheetName.endsWith(LIST_SHEET_SUFFIX)) {
    // This macro should not run on sheets that were generated by this very macro.
    return;
  }

  const targetSheet = getTargetSheet(spreadsheet, currentSheet);
  targetSheet.getRange(1, 1).setValue("Alphabetische Liste der Besucher");

  const insertions: GoogleAppsScript.Spreadsheet.RichTextValue[][] = [];

  const names = new Map<string, number>();

  for (const range of RANGES) {
    const rowCount = range.rowTo - range.rowFrom + 1;
    const columnCount = range.columnTo - range.columnFrom + 1;
    const values = currentSheet
      .getRange(range.rowFrom, range.columnFrom, rowCount, columnCount)
      .getValues();
    for (let sourceRow = 0; sourceRow < rowCount; sourceRow++) {
      let nameStartColumn = 0;
      for (let sourceColumn = 0; sourceColumn < columnCount; sourceColumn++) {
        const sourceString = values[sourceRow][sourceColumn] as string;

        // Keep track of how many times a name occurs.
        const nameCount = names.get(sourceString);
        if (nameCount) {
          names.set(sourceString, nameCount + 1);
        } else {
          names.set(sourceString, 1);
        }

        if (sourceString) {
          // Insert the name of the range if given.
          const rowText =
            (range.name ? `${range.name} ` : "") +
            `Reihe - ${padIndex(sourceRow + 1)}`;
          const richRowText =
            SpreadsheetApp.newRichTextValue().setText(rowText);
          richRowText.setTextStyle(
            range.name?.length ?? 0,
            rowText.length - 2,
            GRAY_TEXT
          );

          const columnText = `Nummer - ${sourceColumn + 1}`;
          const richColumnText =
            SpreadsheetApp.newRichTextValue().setText(columnText);
          richColumnText.setTextStyle(0, 8, GRAY_TEXT);

          insertions.push([
            SpreadsheetApp.newRichTextValue().setText(sourceString).build(),
            richRowText.build(),
            richColumnText.build(),
          ]);
        }

        if (
          sourceColumn + 1 === columnCount ||
          values[sourceRow][sourceColumn + 1] !== sourceString
        ) {
          if (sourceString && sourceColumn - nameStartColumn > 0) {
            insertions.splice(
              insertions.length - sourceColumn + nameStartColumn
            );

            const richText = insertions[insertions.length - 1][2];
            const builder = richText.copy();
            builder
              .setText(
                richText.getText() +
                  (sourceColumn === nameStartColumn + 1
                    ? ` und ${sourceColumn + 1}`
                    : ` bis ${sourceColumn + 1}`)
              )
              .setTextStyle(0, 8, GRAY_TEXT)
              .setTextStyle(
                richText.getText().length + 1,
                richText.getText().length + 4,
                GRAY_TEXT
              );
            insertions[insertions.length - 1][2] = builder.build();
          }
          nameStartColumn = sourceColumn + 1;
        }
      }
    }
  }

  // Sorting is stable, so seats with the same name will remain sorted according to their row and column
  // (as they were inserted by the nested loop above).
  insertions.sort((a, b) =>
    a[0].getText().toLowerCase().localeCompare(b[0].getText().toLowerCase())
  );

  // Handle reservations by the same name:

  for (const entry of insertions) {
    const name: string = entry[0].getText();
    const count = names.get(name);
    const richText = SpreadsheetApp.newRichTextValue();
    if (count) {
      if (count !== 1) {
        const text = `${name} (${count})`;
        richText.setText(text);
        richText.setTextStyle(name.length, text.length, GRAY_TEXT);
      } else {
        richText.setText(name);
      }
      names.delete(name);
    } else {
      richText.setText("");
    }
    entry[0] = richText.build();
  }

  // API calls are very expensive, so by batching all changes in `insertions` we avoid performance cliffs.
  // We cannot set an empty range (would throw).
  if (insertions.length > 0) {
    targetSheet
      .getRange(2, 1, insertions.length, 3)
      .setRichTextValues(insertions);
  }
  // Make sure the first column is big enough to fit all names.
  targetSheet.autoResizeColumn(1);
  targetSheet.autoResizeColumn(3);
  // Assign a constant width to the second column
  targetSheet.setColumnWidth(2, 127);
}
