type Sheet = GoogleAppsScript.Spreadsheet.Sheet;
type Spreadsheet = GoogleAppsScript.Spreadsheet.Spreadsheet;

const METADATA_SOURCE_KEY = "createList::sourceId";
const LIST_SHEET_SUFFIX = " - Liste";

// Ranges to take into account for generating the table. All indices are inclusive.
const RANGES = [
  {
    name: "Galerie",
    rowFrom: 9,
    rowTo: 11,
    columnFrom: 23,
    columnTo: 28,
  },
  {
    name: null,
    rowFrom: 9,
    rowTo: 30,
    columnFrom: 4,
    columnTo: 18,
  },
];

export function createList() {
  /// Pads numbers from 1 to 9 with a leading 0.
  function padIndex(number: number): string {
    if (number < 10) {
      return `0${number}`;
    } else {
      return number.toString();
    }
  }

  function getTargetSheet(spreadsheet: Spreadsheet, sourceSheet: Sheet): Sheet {
    const sourceId = sourceSheet.getSheetId().toString();

    // Find list sheets by looking at their developer metadata.
    // This allows us to keep using the original target sheet even if the original sheet was renamed.
    let target = spreadsheet
      .createDeveloperMetadataFinder()
      .withKey(METADATA_SOURCE_KEY)
      .withValue(sourceId)
      .find()[0]
      ?.getLocation()
      .getSheet();

    const expectedTargetName = sourceSheet.getName() + LIST_SHEET_SUFFIX;

    if (!target) {
      target = spreadsheet.insertSheet(expectedTargetName);

      target.addDeveloperMetadata(METADATA_SOURCE_KEY, sourceId);

      // Differentiate list tabs by coloring them gray.
      target.setTabColor("gray");
      // Prevent focus switch to newly inserted sheet.
      spreadsheet.setActiveSheet(sourceSheet);
    } else {
      target.clear();
      if (target.getName() !== expectedTargetName) {
        target.setName(expectedTargetName);
      }
    }

    return target;
  }

  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  const currentSheet = spreadsheet.getActiveSheet();

  const currentSheetName = currentSheet.getName();

  if (currentSheetName.endsWith(LIST_SHEET_SUFFIX)) {
    // This macro should not run on sheets that were generated by this very macro.
    return;
  }

  const targetSheet = getTargetSheet(spreadsheet, currentSheet);
  targetSheet.getRange(1, 1).setValue("Alphabetische Liste der Besucher");

  const insertions: string[][] = [];

  for (const range of RANGES) {
    for (let sourceRow = range.rowFrom; sourceRow <= range.rowTo; sourceRow++) {
      for (
        let sourceColumn = range.columnFrom;
        sourceColumn <= range.columnTo;
        sourceColumn++
      ) {
        const sourceString = (
          currentSheet.getRange(sourceRow, sourceColumn).getValue() as string
        ).trim();

        if (sourceString !== "") {
          insertions.push([
            sourceString,
            // Insert the name of the range if given.
            (range.name ? `${range.name} ` : "") +
              `Reihe - ${padIndex(sourceRow - range.rowFrom + 1)}`,
            `Nummer - ${sourceColumn - range.columnFrom + 1}`,
          ]);
        }
      }
    }
  }

  // Sorting is stable, so seats with the same name will remain sorted according to their row and column
  // (as they were inserted by the nested loop above).
  insertions.sort((a, b) =>
    a[0].toLowerCase().localeCompare(b[0].toLowerCase())
  );

  // Handle reservations by the same name:

  let previousName: string | undefined;
  let previousNameCount = 0;
  // We intentionally go one past the last element.
  for (let i = 0; i <= insertions.length; i++) {
    const name: string | undefined = insertions[i]?.[0];
    if (name === previousName) {
      previousNameCount++;
      insertions[i][0] = "";
    } else {
      if (previousNameCount !== 1 && previousName) {
        insertions[i - previousNameCount][0] = `${previousName} (${previousNameCount})`;
      }
      previousNameCount = 1;
      previousName = name;
    }
  }

  // API calls are very expensive, so by batching all changes in `insertions` we avoid performance cliffs.
  if (insertions.length > 0) {
    targetSheet.getRange(2, 1, insertions.length, 3).setValues(insertions);
  }
  // Make sure the first column is big enough to fit all names.
  targetSheet.autoResizeColumn(1);
  // Assign a constant width to the second column
  targetSheet.setColumnWidth(2, 127);
}
